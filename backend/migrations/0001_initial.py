# Generated by Django 2.1.2 on 2018-12-25 03:59

import backend.models.user
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=200)),
                ('name', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=200)),
                ('deleted', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', backend.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AwsEnvironmentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=200)),
                ('aws_account_id', models.CharField(max_length=200)),
                ('aws_role', models.CharField(max_length=200)),
                ('aws_external_id', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'aws_environment',
            },
        ),
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='NotificationDestinationModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification_destination',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroupModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aws_environments', models.ManyToManyField(related_name='notification_groups', to='backend.AwsEnvironmentModel')),
            ],
            options={
                'db_table': 'notification_group',
            },
        ),
        migrations.CreateModel(
            name='RoleModel',
            fields=[
                ('deleted', models.IntegerField(default=0)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='TenantModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.IntegerField(default=0)),
                ('tenant_name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=200)),
                ('tel', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tenant',
            },
        ),
        migrations.CreateModel(
            name='EmailDestination',
            fields=[
                ('notificationdestinationmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.NotificationDestinationModel')),
                ('address', models.EmailField(max_length=200)),
            ],
            options={
                'db_table': 'email_destination',
            },
            bases=('backend.notificationdestinationmodel', models.Model),
        ),
        migrations.CreateModel(
            name='ScheduleModel',
            fields=[
                ('eventmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.EventModel')),
                ('name', models.CharField(max_length=200)),
                ('action', models.CharField(max_length=200)),
                ('params', models.CharField(blank=True, max_length=200, null=True)),
                ('notification', models.BooleanField()),
                ('resource_id', models.CharField(max_length=200)),
                ('service', models.CharField(max_length=50)),
                ('region', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'schedule',
            },
            bases=('backend.eventmodel', models.Model),
        ),
        migrations.AddField(
            model_name='notificationgroupmodel',
            name='destinations',
            field=models.ManyToManyField(related_name='notification_groups', to='backend.NotificationDestinationModel'),
        ),
        migrations.AddField(
            model_name='notificationgroupmodel',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_groups', to='backend.TenantModel'),
        ),
        migrations.AddField(
            model_name='notificationdestinationmodel',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.notificationdestinationmodel_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='notificationdestinationmodel',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_destinations', to='backend.TenantModel'),
        ),
        migrations.AddField(
            model_name='eventmodel',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.eventmodel_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='awsenvironmentmodel',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aws_environments', to='backend.TenantModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='aws_environments',
            field=models.ManyToManyField(to='backend.AwsEnvironmentModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='users', to='backend.RoleModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='backend.TenantModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='schedulemodel',
            name='aws_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='backend.AwsEnvironmentModel'),
        ),
        migrations.AlterUniqueTogether(
            name='awsenvironmentmodel',
            unique_together={('aws_account_id', 'deleted')},
        ),
        migrations.AlterUniqueTogether(
            name='usermodel',
            unique_together={('email', 'deleted')},
        ),
    ]
